{
  "swagger": "2.0",
  "info": {
    "description": "This is a simple RESTful API Game server documentation.",
    "version": "1.0.0",
    "title": "Swagger Game",
    "contact": {
      "email": "fathanupn17@gmail.com"
    }
  },
  "host": "localhost:5000",
  "tags": [
    {
      "name": "players",
      "description": "Everything about your Games"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/api/players": {
      "post": {
        "tags": [
          "players"
        ],
        "summary": "Create a new player to the game",
        "description": "",
        "operationId": "placeOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Input your data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Player"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "SUCCESS",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "400": {
            "description": "Username or email or password field cannot be empty."
          },
          "500": {
            "description": "Some error occurred while creating the Player."
          }
        }
      },
      "get": {
        "tags": [
          "players"
        ],
        "summary": "Find all players",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/All"
            }
          },
          "500": {
            "description": "Some error occurred while retrieving players."
          }
        }
      }
    },
    "/api/players/{id}": {
      "get": {
        "tags": [
          "players"
        ],
        "summary": "Find player by ID",
        "description": "Returns a single player",
        "operationId": "getPetById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of player to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "SUCCESS",
            "schema": {
              "$ref": "#/definitions/Success"
            }
          },
          "500": {
            "description": "Error retrieving Player with this id"
          }
        }
      },
      "put": {
        "tags": [
          "players"
        ],
        "summary": "Updates a player in the game with form data",
        "description": "",
        "operationId": "updatePlayerWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of player that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "username",
            "in": "formData",
            "description": "Updated username of the player",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "Updated email of the player",
            "required": false,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Updated password of the player",
            "required": false,
            "type": "string"
          },
          {
            "name": "experience",
            "in": "formData",
            "description": "Updated experience of the player",
            "required": false,
            "type": "integer"
          },
          {
            "name": "lvl",
            "in": "formData",
            "description": "Updated lvl of the player",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Player was updated successfully."
          },
          "400": {
            "description": "Cannot update Player with this id. Maybe Player was not found or req.body is empty!"
          },
          "500": {
            "description": "Error updating Player with this id"
          }
        }
      },
      "delete": {
        "tags": [
          "players"
        ],
        "summary": "Deletes a player",
        "description": "",
        "operationId": "deletePlayer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Player was deleted successfully!"
          },
          "400": {
            "description": "Cannot delete Player with this id. Maybe Player was not found!"
          },
          "500": {
            "description": "Could not delete Player with this id."
          }
        }
      }
    },
    "/api/players/exp/{id}": {
      "post": {
        "tags": [
          "players"
        ],
        "summary": "Create a new player to the game",
        "description": "",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of player that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "exp",
            "in": "formData",
            "description": "Updated exp of the player",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Player with this id has more experience."
          },
          "400": {
            "description": "exp field cannot be empty."
          },
          "500": {
            "description": "Error updating Player exp with this id."
          }
        }
      }
    }
  },
  "definitions": {
    "Player": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "Success": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "example": "SUCCESS"
        },
        "message": {
          "$ref": "#/definitions/Data"
        }
      }
    },
    "All": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string",
          "example": "SUCCESS"
        },
        "message": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Data"
          }
        }
      }
    },
    "Data": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "experience": {
          "type": "integer"
        },
        "lvl": {
          "type": "integer"
        },
        "updatedAt": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        }
      }
    }
  }
}